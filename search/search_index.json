{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Wheel-Deal","text":""},{"location":"#overview","title":"Overview","text":"<p>Wheel-Deal is revolutionizing the car-reselling process by addressing key challenges faced by sellers on online marketplaces. By combining data-driven insights with seamless platform integration, Wheel-Deal empowers sellers to price their vehicles confidently, sell faster, and achieve better outcomes.</p>"},{"location":"#problem","title":"Problem:","text":"<p>Online marketplaces for used cars provide sellers with a platform to list their vehicles but fall short in guiding them through one of the most critical steps: pricing their cars effectively. </p> <p>Key issues include:</p> <ul> <li>Lack of Pricing Guidance: Sellers often rely on guesswork or incomplete research to set their prices.  </li> <li>Missed Opportunities: Overpriced cars deter buyers, while underpriced cars reduce seller earnings.  </li> <li>Inefficient Process: Without data-backed tools, pricing becomes a source of stress and uncertainty.</li> </ul> <p>The result? A frustrating experience for sellers and suboptimal outcomes for online marketplaces.</p>"},{"location":"#solution","title":"Solution:","text":"<p>Wheel-Deal is a cutting-edge solution designed to simplify the car-selling process. Integrated directly into online marketplaces, our tool provides:</p> <ol> <li> <p>Accurate, Data-Driven Pricing Recommendations    Leveraging advanced analytics, Wheel-Deal suggests fair, market-ready prices based on comprehensive car attributes such as make, model, year, mileage, and condition.  </p> </li> <li> <p>Time-to-Sale Predictions    Sellers receive an estimate of how long it will take to sell their car if priced according to our recommendation.  </p> </li> <li> <p>Seamless Integration    As a built-in feature of online marketplaces, Wheel-Deal enhances the platform's value proposition while offering sellers a user-friendly experience.</p> </li> </ol>"},{"location":"#expected-outcomes","title":"Expected Outcomes:","text":"<p>By implementing Wheel-Deal, both sellers and online marketplaces can expect significant improvements:</p>"},{"location":"#for-sellers","title":"For Sellers:","text":"<ul> <li>Confidence in Pricing: Data-backed recommendations eliminate guesswork.  </li> <li>Faster Sales: Competitive pricing attracts buyers more quickly.  </li> <li>Improved Planning: Time-to-sale predictions help sellers make informed decisions.  </li> </ul>"},{"location":"#for-online-marketplaces","title":"For Online Marketplaces:","text":"<ul> <li>Enhanced Platform Offering: Stand out from competitors by integrating Wheel-Deal.  </li> <li>Increased User Engagement: Sellers are more likely to choose platforms that offer pricing tools.  </li> <li>Industry Leadership: Early adopters of Wheel-Deal set the standard for quality and transparency.</li> </ul> <p>Wheel-Deal transforms pricing into a streamlined, efficient, and confident process. With fair pricing and predictive insights, we\u2019re paving the way for better sales outcomes for everyone.</p>"},{"location":"API/","title":"API Documentation","text":"<p>This document provides an overview of the available API endpoints for the Wheel-Deal service, which estimates car sale prices and provides related functionality.</p>"},{"location":"API/#endpoints","title":"Endpoints","text":""},{"location":"API/#1-get-make-options","title":"1. <code>GET /make-options</code>","text":""},{"location":"API/#description","title":"Description:","text":"<p>Retrieve a list of car makes available in the system.</p>"},{"location":"API/#response","title":"Response:","text":"<ul> <li>200 OK: A list of car makes.</li> </ul>"},{"location":"API/#example-response","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"BMW\"},\n    {\"id\": 2, \"name\": \"Chevrolet\"},\n    {\"id\": 3, \"name\": \"Ford\"}\n]\n</code></pre>"},{"location":"API/#2-get-model-optionsmakeid","title":"2. <code>GET /model-options/{makeId}</code>","text":""},{"location":"API/#description_1","title":"Description:","text":"<p>Retrieve a list of car models for a specific car make.</p>"},{"location":"API/#parameters","title":"Parameters:","text":"<ul> <li><code>makeId</code> (path parameter): The ID of the car make (e.g., <code>1</code> for BMW).</li> </ul>"},{"location":"API/#example-request","title":"Example Request:","text":"<pre><code>GET /model-options/1\n</code></pre>"},{"location":"API/#example-response_1","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"3 Series\"},\n    {\"id\": 2, \"name\": \"5 Series\"}\n]\n</code></pre>"},{"location":"API/#3-get-color-options","title":"3. <code>GET /color-options</code>","text":""},{"location":"API/#description_2","title":"Description:","text":"<p>Retrieve a list of available car colors.</p>"},{"location":"API/#response_1","title":"Response:","text":"<ul> <li>200 OK: A list of car colors.</li> </ul>"},{"location":"API/#example-response_2","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"Black\"},\n    {\"id\": 2, \"name\": \"White\"},\n    {\"id\": 3, \"name\": \"Red\"}\n]\n</code></pre>"},{"location":"API/#4-get-fuel-type-options","title":"4. <code>GET /fuel-type-options</code>","text":""},{"location":"API/#description_3","title":"Description:","text":"<p>Retrieve a list of available fuel types.</p>"},{"location":"API/#response_2","title":"Response:","text":"<ul> <li>200 OK: A list of fuel types.</li> </ul>"},{"location":"API/#example-response_3","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"Electric\"},\n    {\"id\": 2, \"name\": \"Gasoline\"},\n    {\"id\": 3, \"name\": \"Hybrid\"}\n]\n</code></pre>"},{"location":"API/#5-get-body-style-options","title":"5. <code>GET /body-style-options</code>","text":""},{"location":"API/#description_4","title":"Description:","text":"<p>Retrieve a list of available car body styles.</p>"},{"location":"API/#response_3","title":"Response:","text":"<ul> <li>200 OK: A list of car body styles.</li> </ul>"},{"location":"API/#example-response_4","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"Sedan\"},\n    {\"id\": 2, \"name\": \"SUV\"},\n    {\"id\": 3, \"name\": \"Coupe\"}\n]\n</code></pre>"},{"location":"API/#6-get-transmission-options","title":"6. <code>GET /transmission-options</code>","text":""},{"location":"API/#description_5","title":"Description:","text":"<p>Retrieve a list of available transmission types.</p>"},{"location":"API/#response_4","title":"Response:","text":"<ul> <li>200 OK: A list of transmission types.</li> </ul>"},{"location":"API/#example-response_5","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"Manual\"},\n    {\"id\": 2, \"name\": \"Automatic\"}\n]\n</code></pre>"},{"location":"API/#7-get-car-option-options","title":"7. <code>GET /car-option-options</code>","text":""},{"location":"API/#description_6","title":"Description:","text":"<p>Retrieve a list of available car options.</p>"},{"location":"API/#response_5","title":"Response:","text":"<ul> <li>200 OK: A list of car options.</li> </ul>"},{"location":"API/#example-response_6","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"Base\"},\n    {\"id\": 2, \"name\": \"Full\"},\n    {\"id\": 3, \"name\": \"Luxe\"}\n]\n</code></pre>"},{"location":"API/#8-get-damage-options","title":"8. <code>GET /damage-options</code>","text":""},{"location":"API/#description_7","title":"Description:","text":"<p>Retrieve a list of available damage levels for cars.</p>"},{"location":"API/#response_6","title":"Response:","text":"<ul> <li>200 OK: A list of damage levels.</li> </ul>"},{"location":"API/#example-response_7","title":"Example Response:","text":"<pre><code>[\n    {\"id\": 1, \"name\": \"None\"},\n    {\"id\": 2, \"name\": \"Medium\"},\n    {\"id\": 3, \"name\": \"Total\"}\n]\n</code></pre>"},{"location":"API/#9-post-predict","title":"9. <code>POST /predict</code>","text":""},{"location":"API/#description_8","title":"Description:","text":"<p>Predict the sale price and the estimated time to sell a car based on various features provided by the user.</p>"},{"location":"API/#request-body","title":"Request Body:","text":"<ul> <li>makeId (int): ID of the car make (e.g., 1 for BMW).</li> <li>modelId (int): ID of the car model (e.g., 1 for 5 Series).</li> <li>transmissionId (int): ID of the car's transmission type.</li> <li>fueltypeId (int): ID of the car's fuel type.</li> <li>bodyStyleId (int): ID of the car's body style.</li> <li>colorId (int): ID of the car's color.</li> <li>optionId (int): ID of the car's additional options.</li> <li>damageId (int): ID representing the car's damage level.</li> <li>year (int): The year the car was manufactured. Validation: Must be between 1886 and 2024 (inclusive).</li> <li>mileage (int): The car's mileage in kilometers. Validation: Must be a positive integer up to 1,000,000.</li> <li>horsepower (int): The horsepower of the car. Validation: Must be between 0 and 2000.</li> <li>numPrevOwners (int): Number of previous owners of the car. Validation: Must be between 0 and 20.</li> </ul>"},{"location":"API/#response_7","title":"Response:","text":"<ul> <li>200 OK: The predicted price and related car details.</li> </ul>"},{"location":"API/#example-response_8","title":"Example Response::","text":"<pre><code>{\n    \"price\": 25000.0,\n    \"time\": 15.0,\n    \"make\": \"BMW\",\n    \"model\": \"5 Series\",\n    \"transmission\": \"Automatic\",\n    \"fueltype\": \"Gasoline\",\n    \"bodyStyle\": \"Sedan\",\n    \"color\": \"Black\",\n    \"option\": \"Sunroof\",\n    \"damage\": \"None\",\n    \"year\": 2020,\n    \"mileage\": 30000,\n    \"horsepower\": 150,\n    \"numPrevOwners\": 1\n}\n</code></pre>"},{"location":"App/","title":"App Service Documentation","text":"<p>This section provides a high-level overview of the app service used in the WheelDeal project. It consists of the index.js file and two main services: PredictionService and OptionsService. These services manage the car evaluation process, including fetching car options for user selection and generating price predictions based on car properties.</p>"},{"location":"App/#services-overview","title":"Services Overview","text":""},{"location":"App/#1-predictionservice","title":"1. PredictionService","text":"<p>The <code>PredictionService</code> is responsible for providing car prediction results based on the properties provided by the user. This service sends a request to the backend, providing the car properties.</p>"},{"location":"App/#methods","title":"Methods:","text":"<ul> <li> <p>getPredictionResults(carProperties)</p> <ul> <li>Description: Sends a POST request to the <code>/predict</code> endpoint with car properties.</li> <li>Parameters: <ul> <li><code>carProperties</code>: An object containing the properties of the car, such as make, model, transmission, fuel type, etc.</li> </ul> </li> <li>Returns: A Promise that resolves to an object with the predicted car details.</li> <li> <p>Error Handling:</p> <ul> <li>Rejects with a message if required data is missing or if the fetch operation fails.</li> </ul> </li> <li> <p>Example Response: <pre><code>{\n    make: \"Ford\",\n    model: \"Focus\",\n    year: 2016,\n    mileage: 200000,\n    horsepower: 240,\n    numOfPrevOwners: 3,\n    fueltype: \"Petrol\",\n    bodystyle: \"Convertible\",\n    color: \"Blue\",\n    options: \"Bluetooth Connectivity\",\n    damagelevel: \"No Damage\",\n    price: 5000,\n    time: 10\n}\n</code></pre></p> </li> </ul> </li> </ul>"},{"location":"App/#2-optionsservice","title":"2. OptionsService","text":"<p>The <code>OptionsService</code> handles retrieving the available options for various car attributes, such as make, model, fuel type, transmission type, etc. These options are used to populate dropdown lists (select inputs) on the car evaluation form in the user interface.</p>"},{"location":"App/#properties","title":"Properties:","text":"<ul> <li>makeOptions: Options for car makes.</li> <li>modelOptions: Options for car models (taking into account the selected car make).</li> <li>transmissionOptions: Options for car transmission types.</li> <li>fuelTypeOptions: Options for fuel types.</li> <li>bodyStyleOptions: Options for body styles.</li> <li>colorOptions: Options for car colors.</li> <li>carOptionOptions: Options for additional car features (e.g., Bluetooth, GPS).</li> <li>damageOptions: Options for car damage levels (e.g., No Damage, Minor Damage).</li> </ul>"},{"location":"App/#methods_1","title":"Methods:","text":"<ul> <li><code>getMakeOptions()</code></li> <li><code>getModelOptions(makeId</code>)</li> <li><code>getTransmissionOptions()</code></li> <li><code>getFuelTypeOptions()</code></li> <li><code>getBodyStyleOptions()</code></li> <li><code>getColorOptions()</code></li> <li><code>getCarOptionOptions()</code></li> <li><code>getDamageOptions()</code></li> </ul>"},{"location":"App/#example-usage","title":"Example usage:","text":"<pre><code>const optionsService = new OptionsService();\noptionsService.getMakeOptions()\n    .then(makeOptions =&gt; console.log(makeOptions))\n    .catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"App/#3-indexjs","title":"3. index.js","text":"<p>Handles DOM interactions and event listeners for the car evaluation platform.</p>"},{"location":"App/#key-functions","title":"Key functions","text":"<ul> <li><code>populateSelect(select, options)</code><ul> <li>Populates the select HTML object by an array of HTMLOptionElement-s.</li> </ul> </li> <li><code>populateAllPossibleSelects()</code><ul> <li>Populates all dropdowns (e.g., make, model, transmission) with options, except the model dropdown, because the model dropdown is populated when the make is selected.</li> </ul> </li> <li><code>showPredictionResults(predictionResults)</code><ul> <li>Updates the UI with prediction results.</li> </ul> </li> <li><code>handleMakeSelectChange()</code><ul> <li>Dynamically updates the model dropdown based on the selected make.</li> </ul> </li> <li><code>evaluateButton.addEventListener(\"click\")</code><ul> <li>Collects form data and fetches prediction results when the \"Evaluate\" button is clicked.</li> </ul> </li> </ul>"},{"location":"ETL/","title":"ETL Service Documentation","text":""},{"location":"ETL/#etl-workflow","title":"ETL Workflow","text":"<p>This ETL (Extract, Transform, Load) service is designed to manage the pipeline for handling car sales data. It performs the following operations. The <code>etl_process</code> function orchestrates the entire ETL workflow:</p> <ol> <li> <p>Data Augmentation: Enhances the base CSV data with simulated data to expand the dataset.</p> </li> <li> <p>Dimension Table Population: Populates predefined dimension tables with categorical data such as car makes, models, fuel types, and more.</p> </li> <li> <p>Data Transformation: Transforms the augmented dataset into a structured fact table format.</p> </li> <li> <p>Data Loading: Inserts the transformed fact table into a PostgreSQL database.</p> </li> </ol>"},{"location":"ETL/#features","title":"Features","text":""},{"location":"ETL/#data-augmentation","title":"Data Augmentation","text":"<p>As our product is related to car sales, we wanted to have a relatively realistic dataset (e.g., car models correspond to their respective makes). That\u2019s why we asked ChatGPT to generate a relatively meaningful dataset and then generated additional columns on top of it. </p> <p>While we could have used ChatGPT to generate the entire dataset, we opted to generate data ourselves to enhance our skills, despite the additional complexity of training the model on that data.</p> <p>The <code>augment_data</code> function in the <code>data_simulation</code> module expands the base dataset located at <code>./Database/csv/Wheel Data Final.csv</code>. </p>"},{"location":"ETL/#base-dataset-wheel-data-finalcsv","title":"Base Dataset (Wheel Data Final.csv)","text":"<p>The base dataset includes the following columns: - <code>Car_make</code> - <code>Model</code> - <code>Milage</code> - <code>Transmission</code> - <code>Year</code> - <code>Website_post_date</code> - <code>Sell_date</code> - <code>Options</code> - <code>Horsepower</code></p>"},{"location":"ETL/#generated-columns","title":"Generated Columns","text":"<p>The <code>augment_data</code> function generates the following additional columns: - <code>Color</code> - <code>Damage</code> - <code>Body_style</code> - <code>Fuel_type</code> - <code>Num_of_prev_owners</code> - <code>Estimated_price</code></p> <p>The augmented dataset is saved as <code>./Database/csv/car_sales_augmented.csv</code>.</p>"},{"location":"ETL/#predefined-dimension-table-population","title":"Predefined Dimension Table Population","text":"<p>The <code>populate_predefined_dimension_tables</code> function populates the following dimension tables with predefined values. These tables are saved to the database using the <code>load_to_database</code> function:</p> <ul> <li>CarMake: Includes car brands like Audi, BMW, Toyota, etc.</li> <li>Model: Lists specific models associated with car makes.</li> <li>FuelType: Captures types of fuel like Gasoline, Diesel, Electric, etc.</li> <li>Color: Lists car colors such as Black, White, Silver, etc.</li> <li>BodyStyle: Includes styles like Sedan, SUV, Hatchback, etc.</li> <li>Transmission: Captures transmission types such as Automatic and Manual.</li> <li>Option: Lists option packages like Base, Advanced, Luxe, etc.</li> <li>Damage: Categorizes damage levels such as None, Low, Medium, Total.</li> </ul>"},{"location":"ETL/#data-transformation","title":"Data Transformation","text":"<p>The transformation process includes the following steps:</p> <ol> <li>Mapping Categorical Values: Maps categorical values (e.g., <code>CarMake</code>, <code>Model</code>) to their respective IDs using dimension tables via the <code>get_mapping</code> function.</li> <li>Fact Table Creation: The <code>transform_to_fact_table</code> function uses the augmented dataset and the mapped categorical variables to create the fact table.</li> <li>Saving Transformed Data: The transformed data is saved as <code>./Database/csv/car_sales_fact.csv</code>.</li> </ol>"},{"location":"ETL/#data-loading","title":"Data Loading","text":"<p>The <code>load_to_database</code> function uses PostgreSQL and <code>psycopg2</code> to efficiently insert the transformed fact table into the database. Key features include:</p> <ul> <li>Batch Insertion: Optimizes performance by inserting data in batches.</li> <li>Data Type Validation: Ensures numeric, string, and datetime fields are correctly handled.</li> </ul>"},{"location":"ETL/#database-erd","title":"Database ERD","text":"<p>The obtained database has the following Entity-Relationship Diagram (ERD):</p> <p>(Include or reference the ERD image or diagram here)</p>"},{"location":"Model/","title":"Model Documentation","text":"<p>This documentation provides an overview of the train.py script, which predicts: 1. The estimated price of a car based on various features using ElasticNet regression. 2. The days required to sell a car using CatBoost regression.</p>"},{"location":"Model/#workflow","title":"Workflow","text":"<ol> <li>Data Preprocessing:</li> <li>Load data from a CSV file3.</li> <li>Convert date columns and create time-related features.</li> <li>Perform log transformation for numerical stability and better model performance.</li> <li>Feature Engineering:</li> <li>One-hot encode categorical variables.</li> <li>Create dummy variables to represent categorical data.</li> <li>Model Training and Evaluation:</li> <li>Train an ElasticNet model to predict car prices.</li> <li>Train a CatBoost regressor to predict days to sell using features and predicted prices.</li> <li>Model Saving:</li> <li>Save trained models using pickle for future use.</li> </ol>"},{"location":"Model/#dependencies","title":"Dependencies","text":"<p>The following Python libraries are required: - pandas - numpy - scikit-learn - catboost - dotenv - sqlalchemy - pickle</p> <p>Install these libraries using: pip install pandas numpy scikit-learn catboost python-dotenv sqlalchemy ...---</p>"},{"location":"Model/#data-preprocessing","title":"Data Preprocessing","text":""},{"location":"Model/#input-data","title":"Input Data","text":"<ul> <li>Columns Required:</li> <li>Website_post_date: The date the car listing was posted.</li> <li>Sell_date: The date the car was sold.</li> <li>Estimated_price: The price of the car.</li> <li>Categorical features: Car_make, Model, Transmission, Options, Color, Damage, Body_style, Fuel_type.</li> </ul>"},{"location":"Model/#steps","title":"Steps:","text":"<ol> <li>Date Conversion: Convert Website_post_date and Sell_date to datetime format.</li> <li>Feature Creation: Compute Days_to_sell as the difference between Sell_date and Website_post_date.</li> <li>Log Transformation: Apply log transformation to Estimated_price for numerical stability.</li> <li>One-Hot Encoding: Transform categorical features into dummy variables using pd.get_dummies.</li> </ol>"},{"location":"Model/#models","title":"Models","text":""},{"location":"Model/#1-price-prediction-model-elasticnet","title":"1. Price Prediction Model (ElasticNet)","text":""},{"location":"Model/#description","title":"Description","text":"<p>Predicts the car's price based on input features using the ElasticNet regression algorithm.</p>"},{"location":"Model/#features","title":"Features","text":"<ul> <li>Car attributes such as make, model, mileage, fuel type, etc.</li> </ul>"},{"location":"Model/#methods","title":"Methods","text":"<ul> <li>train_and_evaluate_model(regressor, X_train, y_train, X_test, y_test):</li> <li>Trains a regression model and evaluates its performance.</li> <li>Parameters: <ul> <li>regressor: Regression model instance.</li> <li>X_train: Training feature set.</li> <li>y_train: Training target variable.</li> <li>X_test: Testing feature set.</li> <li>y_test: Testing target variable.</li> </ul> </li> <li>Returns: The trained model, performance metrics (MAE, MSE, R2), and predictions.</li> </ul>"},{"location":"Model/#2-days-to-sell-prediction-model-catboost","title":"2. Days to Sell Prediction Model (CatBoost)","text":""},{"location":"Model/#description_1","title":"Description","text":"<p>Predicts the number of days it will take to sell a car based on input features and predicted price.</p>"},{"location":"Model/#features_1","title":"Features","text":"<ul> <li>Car attributes and the predicted price from the price prediction model.</li> </ul>"},{"location":"Model/#methods_1","title":"Methods","text":"<ul> <li>train_and_evaluate_model(regressor, X_train, y_train, X_test, y_test):</li> <li>Trains a regression model and evaluates its performance (used for CatBoost).</li> <li>Parameters: <ul> <li>regressor: Regression model instance.</li> <li>X_train: Training feature set.</li> <li>y_train: Training target variable.</li> <li>X_test: Testing feature set.</li> <li>y_test: Testing target variable.</li> </ul> </li> <li>Returns: The trained model, performance metrics (MAE, MSE, R2), and predictions.</li> </ul>"},{"location":"Model/#prediction-workflow","title":"Prediction Workflow","text":"<ol> <li>Train the ElasticNet model using the historical data (train_and_evaluate_model function).</li> <li>Use the resulting predicted prices as input for the CatBoost model.</li> <li>Train the CatBoost model using the features and predicted prices from the ElasticNet model.</li> </ol>"},{"location":"Model/#script-execution","title":"Script Execution","text":""},{"location":"Model/#trainpy","title":"train.py","text":"<p>The script responsible for training the models.</p>"},{"location":"Model/#steps_1","title":"Steps:","text":"<ol> <li>Load and preprocess the data.</li> <li>Train the ElasticNet model for price prediction using the train_and_evaluate_model function.</li> <li>Use predicted prices to train the CatBoost model for days-to-sell prediction using train_and_evaluate_model.</li> <li>Save both models as .pkl files for future use.</li> </ol>"},{"location":"Model/#running-the-script","title":"Running the Script","text":"<p>Ensure all dependencies are installed and input data is available. Then execute: python train.py ...---</p>"},{"location":"Model/#model-saving","title":"Model Saving","text":"<p>The trained models are saved as .pkl files for reuse: 1. ElasticNet Model: Saved as elastic_net_price_model.pkl. 2. CatBoost Model: Saved as catboost_sell_time_model.pkl.</p> <p>These files are stored in the ./models/ directory.</p>"}]}